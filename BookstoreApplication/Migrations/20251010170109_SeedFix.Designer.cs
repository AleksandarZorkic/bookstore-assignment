// <auto-generated />
using System;
using BookstoreApplication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookstoreApplication.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010170109_SeedFix")]
    partial class SeedFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Birthday");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "British writer and journalist.",
                            DateOfBirth = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "George Orwell"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "English novelist known for romantic fiction.",
                            DateOfBirth = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Jane Austen"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "British author best known for Harry Potter.",
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "American writer and humorist.",
                            DateOfBirth = new DateTime(1835, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Mark Twain"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Russian novelist, known for War and Peace.",
                            DateOfBirth = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Leo Tolstoy"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAward", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer");

                    b.Property<int>("YearAwarded")
                        .HasColumnType("integer");

                    b.HasKey("AuthorId", "AwardId", "YearAwarded");

                    b.HasIndex("AwardId");

                    b.ToTable("AuthorAwardBridge", null, t =>
                        {
                            t.HasCheckConstraint("CK_AuthorAward_YearAwarded", "\"YearAwarded\" >= 1800 AND \"YearAwarded\" <= EXTRACT(YEAR FROM CURRENT_DATE)");
                        });

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AwardId = 2,
                            YearAwarded = 1949
                        },
                        new
                        {
                            AuthorId = 1,
                            AwardId = 4,
                            YearAwarded = 1951
                        },
                        new
                        {
                            AuthorId = 1,
                            AwardId = 3,
                            YearAwarded = 1970
                        },
                        new
                        {
                            AuthorId = 2,
                            AwardId = 1,
                            YearAwarded = 1905
                        },
                        new
                        {
                            AuthorId = 2,
                            AwardId = 2,
                            YearAwarded = 1925
                        },
                        new
                        {
                            AuthorId = 2,
                            AwardId = 3,
                            YearAwarded = 1971
                        },
                        new
                        {
                            AuthorId = 3,
                            AwardId = 4,
                            YearAwarded = 2001
                        },
                        new
                        {
                            AuthorId = 3,
                            AwardId = 2,
                            YearAwarded = 2000
                        },
                        new
                        {
                            AuthorId = 3,
                            AwardId = 3,
                            YearAwarded = 1999
                        },
                        new
                        {
                            AuthorId = 4,
                            AwardId = 1,
                            YearAwarded = 1907
                        },
                        new
                        {
                            AuthorId = 4,
                            AwardId = 2,
                            YearAwarded = 1918
                        },
                        new
                        {
                            AuthorId = 4,
                            AwardId = 4,
                            YearAwarded = 1952
                        },
                        new
                        {
                            AuthorId = 5,
                            AwardId = 1,
                            YearAwarded = 1902
                        },
                        new
                        {
                            AuthorId = 5,
                            AwardId = 2,
                            YearAwarded = 1920
                        },
                        new
                        {
                            AuthorId = 5,
                            AwardId = 3,
                            YearAwarded = 1970
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Awards", t =>
                        {
                            t.HasCheckConstraint("CK_Award_StartYear", "\"StartYear\" >= 1800 AND \"StartYear\" <= EXTRACT(YEAR FROM CURRENT_DATE)");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Global award for outstanding contributions to literature.",
                            Name = "Nobel Prize in Literature",
                            StartYear = 1901
                        },
                        new
                        {
                            Id = 2,
                            Description = "Distinguished fiction by an American author.",
                            Name = "Pulitzer Prize for Fiction",
                            StartYear = 1917
                        },
                        new
                        {
                            Id = 3,
                            Description = "Best original novel in English.",
                            Name = "Booker Prize",
                            StartYear = 1969
                        },
                        new
                        {
                            Id = 4,
                            Description = "Annual U.S. awards for literature.",
                            Name = "National Book Award",
                            StartYear = 1950
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "9780451524935",
                            PageCount = 328,
                            PublishedDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            ISBN = "9780451526342",
                            PageCount = 112,
                            PublishedDate = new DateTime(1945, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            ISBN = "9780141439518",
                            PageCount = 432,
                            PublishedDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            ISBN = "9780141439587",
                            PageCount = 474,
                            PublishedDate = new DateTime(1815, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Title = "Emma"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            ISBN = "9780747532699",
                            PageCount = 223,
                            PublishedDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            ISBN = "9780747538493",
                            PageCount = 251,
                            PublishedDate = new DateTime(1998, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            ISBN = "9780747542155",
                            PageCount = 317,
                            PublishedDate = new DateTime(1999, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            Title = "Harry Potter and the Prisoner of Azkaban"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            ISBN = "9780142437179",
                            PageCount = 366,
                            PublishedDate = new DateTime(1884, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Title = "Adventures of Huckleberry Finn"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 4,
                            ISBN = "9780143039563",
                            PageCount = 274,
                            PublishedDate = new DateTime(1876, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Title = "The Adventures of Tom Sawyer"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            ISBN = "9780140447934",
                            PageCount = 1225,
                            PublishedDate = new DateTime(1869, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 5,
                            ISBN = "9780143035008",
                            PageCount = 864,
                            PublishedDate = new DateTime(1877, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 5,
                            ISBN = "9780553210354",
                            PageCount = 86,
                            PublishedDate = new DateTime(1886, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Title = "The Death of Ivan Ilyich"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "80 Strand, London",
                            Name = "Penguin Books",
                            Website = "https://penguin.co.uk"
                        },
                        new
                        {
                            Id = 2,
                            Address = "50 Bedford Square, London",
                            Name = "Bloomsbury",
                            Website = "https://www.bloomsbury.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "New York, USA",
                            Name = "Vintage Books",
                            Website = "https://www.vintagebooks.com"
                        });
                });

            modelBuilder.Entity("BookstoreApplication.Models.AuthorAward", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Award", "Award")
                        .WithMany("AuthorAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Award");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Book", b =>
                {
                    b.HasOne("BookstoreApplication.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookstoreApplication.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Author", b =>
                {
                    b.Navigation("AuthorAwards");
                });

            modelBuilder.Entity("BookstoreApplication.Models.Award", b =>
                {
                    b.Navigation("AuthorAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
